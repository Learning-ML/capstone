LBMA_daily = Quandl("LBMA/GOLD", collapse = 'daily', type = 'ts')
LBMA_daily
attributes(LBMA_daily)
dim(LBMA_daily)
LBMA_daily <- LBMA_daily[, c(1, 2)]
LBMA_daily = Quandl("LBMA/GOLD", collapse = 'daily', type = 'ts')
LBMA_daily = Quandl("LBMA/GOLD", type = 'ts')
plot.ts(LBMA_daily)
LBMA_monthly = Quandl("LBMA/GOLD", collapse = 'monthly', type = 'ts')
plot.ts(LBMA_monthly)
LBMA_quarterly = Quandl("LBMA/GOLD", collapse = 'quarterly', type = 'ts')
LBMA_annually = Quandl("LBMA/GOLD", collapse = 'annual', type = 'ts')
rm(LBMA_daily)
rm(LBMA_daily_ts)
rm(LBMA_weekly)
plot.ts(LBMA_annually)
plot.ts(LBMA_quarterly)
plot.ts(LBMA_monthly)
LBMA_weekly = Quandl("LBMA/GOLD", collapse = 'weekly', type = 'ts')
LBMA_annually_d1 <- diff(LBMA_annually, differences=1)
plot.ts(LBMA_annually_d1)
attributes(LBMA_annually)
dimnames(LBMA_annually)
dimnames(LBMA_annually) <- c("USD (AM)")
dimnames(LBMA_annually) <- list("USD (AM)")
dimnames(LBMA_annually) <- list(c("USD (AM)"))
LBMA_annually[1]
LBMA_annually$'USD (AM)'
LBMA_annually$USD (AM)
LBMA_annually[, 'USD (AM)']
LBMA_annually = LBMA_annually[, 'USD (AM)']
LBMA_annually
LBMA_annually_d1 <- diff(LBMA_annually, differences=1)
plot.ts(LBMA_annually_d1)
LBMA_annually_d1 <- diff(LBMA_annually, differences=2)
plot.ts(LBMA_annually_d1)
LBMA_annually_d1 <- diff(LBMA_annually, differences=3)
plot.ts(LBMA_annually_d1)
LBMA_annually_d1 <- diff(LBMA_annually, differences=4)
plot.ts(LBMA_annually_d1)
LBMA_annually_d1 <- diff(LBMA_annually, differences=3)
plot.ts(LBMA_annually_d1)
LBMA_annually_d1 <- diff(LBMA_annually, differences=2)
plot.ts(LBMA_annually_d1)
LBMA_annually_d1 <- diff(LBMA_annually, differences=1)
plot.ts(LBMA_annually_d1)
LBMA_annually_d1 <- diff(LBMA_annually, differences=0)
LBMA_annually_d1 <- diff(LBMA_annually, differences=1)
plot.ts(LBMA_annually_d1)
plot.ts(LBMA_annually)
Acf(LBMA_annually)
library(fpp)
install.packages('fpp')
library(forecast)
Acf(LBMA_annually)
Acf(LBMA_annually_d1)
Pacf(LBMA_annually_d1)
Acf(LBMA_annually_d1)
Pacf(LBMA_annually_d1)
Box.text(LBMA_annually_d1, log=20, type='Ljung-Box')
Box.test(LBMA_annually_d1, log=20, type='Ljung-Box')
Box.test(LBMA_annually_d1, lag=20, type='Ljung-Box')
adf.test(LBMA_annually_d1, alternative = 'stationary')
library(time.series)
library(tseries)
a
adf.test(LBMA_annually_d1, alternative = 'stationary')
kpss.test(LBMA_annually_d1)
Acf(LBMA_annually_d1)
Pacf(LBMA_annually_d1)
LBMA_annually_d1 <- diff(LBMA_annually, differences=2)
plot.ts(LBMA_annually_d1)
Acf(LBMA_annually_d1)
Pacf(LBMA_annually_d1)
Box.test(LBMA_annually_d1, lag=20, type='Ljung-Box')
LBMA_annually_d1 <- diff(LBMA_annually, differences=3)
plot.ts(LBMA_annually_d1)
Acf(LBMA_annually_d1)
Pacf(LBMA_annually_d1)
Box.test(LBMA_annually_d1, lag=20, type='Ljung-Box')
adf.test(LBMA_annually_d1, alternative = 'stationary')
kpss.test(LBMA_annually_d1)
plot.ts(LBMA_annually_d1)
LBMA_monthly_d1 <- diff(LBMA_monthly, differences=1)
plot.ts(LBMA_monthly_d1)
LBMA_monthly = LBMA_monthly[, 'USD (AM)']
LBMA_monthly_d1 <- diff(LBMA_monthly, differences=1)
plot.ts(LBMA_monthly_d1)
Acf(LBMA_monthly_d1)
Pacf(LBMA_monthly_d1)
Box.test(LBMA_monthly_d1, lag=20, type='Ljung-Box')
adf.test(LBMA_monthly_d1, alternative = 'stationary')
kpss.test(LBMA_monthly_d1)
Acf(LBMA_monthly)
Pacf(LBMA_monthly)
Box.test(LBMA_monthly, lag=20, type='Ljung-Box')
adf.test(LBMA_monthly, alternative = 'stationary')
kpss.test(LBMA_monthly)
save.image("~/Downloads/NYCDSA/Project/Capstone/GLD_Forecast.RData")
epsilon_ber <- 2*rbinom(100,1,p=0.5)-1     # converting the values 0, 1 to -1, 1
x_ber <- cumsum(epsilon_ber)
plot(x_ber, type='l')
epsilon_norm <- rnorm(100, 0, sd=0.1)
x_norm <- cumsum(epsilon_norm)
plot(x_norm, type='l')
N<-10000
epsilon1_ber <-  2 * rbinom(N,1,p=0.5) - 1
epsilon2_ber <-  2 * rbinom(N,1,p=0.5) - 1
x_ber <-  cumsum(epsilon1_ber)
y_ber <-  cumsum(epsilon2_ber)
plot(x_ber, y_ber, type='l')
N<-10000
epsilon1_norm <-  rnorm(N,0,0.1)
epsilon2_norm <-  rnorm(N,0,0.1)
x_norm <-  cumsum(epsilon1_norm)
y_norm <-  cumsum(epsilon2_norm)
plot(x_norm, y_norm, type='l')
library(quantmod)
sp500<-new.env()
startDate = as.Date('1960-01-04')
endDate   = as.Date('2017-05-23')
getSymbols('^GSPC',env=sp500, src='yahoo', from=startDate,
to=endDate,auto.assign=T)
getDividends('^GSPC', env=sp500, src='yahoo', from=startDate,
to=endDate,auto.assign=T)
getSplits('^GSPC', env=sp500, src='yahoo',from=startDate,to=endDate,auto.assign=T)
head(sp500$GSPC)
tail(sp500$GSPC)
class(sp500$GSPC)
sp_prc<-sp500$GSPC[,6]
class(sp_prc)    # xts, zoo      'zoo' stands for Z's ordered observations
plot(sp_prc)
ret_sp500_daily<-(sp_prc-lag(sp_prc))/lag(sp_prc)
plot(ret_sp500_daily)
ret_sp500_daily<-diff(sp_prc)/lag(sp_prc)
plot(ret_sp500_daily)
mean(ret_sp500_daily,na.rm=T) * 252     # annualized return
spy<-new.env()
getSymbols('SPY',env=spy, src='yahoo', from=as.Date('1993-01-29'),
to=as.Date('2017-05-23'))
getDividends('SPY',env=spy, src='yahoo', from=as.Date('1993-01-29'),
to=as.Date('2017-05-23'),auto.assign=T)
getSplits('SPY',env=spy, src='yahoo', from=as.Date('1993-01-29'),
to=as.Date('2017-05-23'),auto.assign=T)
head(spy$SPY)
spy_prc <- spy$SPY[,6]
ret_spy_daily <- diff(spy_prc)/lag(spy_prc)
ret_spy_div   <- spy$SPY.div/spy_prc
mean(ret_spy_daily, na.rm=T) * 252    # ~ 8.71%/year
mean(ret_spy_div,na.rm=T) * 4 # one dividend per quarter 1.80%/year
sp_avg20 = rollmean(sp_prc, 20, align='center')
plot(sp_avg20)
sp_avg100 = rollmean(sp_prc, 100, align='center')
plot(sp_avg100)
ret_sp500_daily<-ret_sp500_daily[2:length(ret_sp500_daily)]  # removing the first nan element
ret_sp500_avg20 = rollmean(ret_sp500_daily, 20, align='center')
plot(ret_sp500_avg20)
ret_sp500_avg100 = rollmean(ret_sp500_daily, 100, align='center')
plot(ret_sp500_avg100)       # The 100 trading days moving average is smoother than the 20 days version
qqnorm(ret_sp500_daily)
qqnorm(ret_sp500_daily)
qqline(ret_sp500_daily)
qqnorm(ret_sp500_daily)
qqnorm(ret_sp500_daily)
qqnorm(ret_sp500_avg100)
N <- 100
sigma <- 0.1
epsilon = rnorm(N, 0, sigma)
X <- numeric(N)
theta <- 0.2
X[1]  <- 0.0
for (i in 2:N) {
X[i] <- theta * X[i-1] + epsilon[i]
}
plot(X,type='l')
N <- 100
sigma <- 0.1
epsilon = rnorm(N, 0, sigma)
Y <- numeric(N)
phi <- 0.6
Y[1]  <- 0.0
for (i in 2:N) {
Y[i] <- epsilon[i] + phi * epsilon[i-1]
}
plot(Y,type='l')
library(tseries)
adf.test(sp_prc)
adf.test(sp_prc)
adf.test(ret_sp500_daily)
View(spy_prc)
View(sp_prc)
sp_prc <- sp_prc[!is.na(),]
sp_prc <- sp_prc[!is.na(sp_prc),]
is.na(sp_prc)
sum(is.na(sp_prc))
adf.test(sp_prc)
qqnorm(ret_sp500_daily)
head(ret_sp500_daily)
ret_sp500_daily <- ret_sp500_daily[!is.na(ret_sp500_daily,)]
ret_sp500_daily <- ret_sp500_daily[!is.na(ret_sp500_daily),]
qqnorm(ret_sp500_daily)
qqline(ret_sp500_daily)
adf.test(ret_sp500_daily)
adf.test(sp_prc)
sp_logPrc <- log(sp_prc)
logRet_sp500_daily <- diff(sp_logPrc)
logRet_sp500_daily <- logRet_sp500_daily[2:length(logRet_sp500_daily)]
adf.test(logRet_sp500_daily)
plot(sp_prc)
adf.test(sp_prc)
acf(X, lag.max=10)  # lag.max = 10 to plot only the 10 terms
load("~/Downloads/NYCDSA/Project/Capstone/GLD_Forecast.RData")
ndiffs(LBMA_annually)
nsdiffs(LBMA_annually)
ndiffs(LBMA_annually)
ndiffs(LBMA_quarterly)
ndiffs(LBMA_monthly)
ndiffs(LBMA_weekly)
ndiffs(LBMA_monthly)
ndiffs(LBMA_annually)
Acf(LBMA_annually_d1)
Pacf(LBMA_annually_d1)
Acf(LBMA_annually_d1)
Box.test(LBMA_annually_d1, lag=20, type='Ljung-Box')
adf.test(LBMA_annually_d1, alternative = 'stationary')
kpss.test(LBMA_annually_d1)
plot.ts(LBMA_annually_d1)
Acf(LBMA_monthly)
Acf(LBMA_monthly_d1)
Pacf(LBMA_monthly_d1)
LBMA_weekly = LBMA_weekly[, 'USD (AM)']
LBMA_weekly_d1 <- diff(LBMA_weekly, differences=1)
LBMA_weekly_d1 <- diff(LBMA_weekly, differences=1)
plot.ts(LBMA_weekly_d1)
Box.test(LBMA_weekly_d1, lag=20, type='Ljung-Box')
adf.test(LBMA_weekly_d1, alternative = 'stationary')
kpss.test(LBMA_weekly_d1)
Acf(LBMA_weekly_d1)
Pacf(LBMA_weekly_d1)
Acf(LBMA_weekly_d1)
Pacf(LBMA_weekly_d1)
plot.ts(LBMA_weekly_d1)
plot.ts(LBMA_annually_d1)
plot.ts(LBMA_monthly_d1)
Acf(LBMA_weekly_d1)
Pacf(LBMA_weekly_d1)
LBMA_weekly_d1 <- diff(LBMA_weekly, differences=2)
plot.ts(LBMA_weekly_d1)
Box.test(LBMA_weekly_d1, lag=20, type='Ljung-Box')
adf.test(LBMA_weekly_d1, alternative = 'stationary')
kpss.test(LBMA_weekly_d1)
Acf(LBMA_weekly_d1)
Pacf(LBMA_weekly_d1)
LBMA_weekly_d1 <- diff(LBMA_weekly, differences=3)
plot.ts(LBMA_weekly_d1)
Box.test(LBMA_weekly_d1, lag=20, type='Ljung-Box')
adf.test(LBMA_weekly_d1, alternative = 'stationary')
kpss.test(LBMA_weekly_d1)
Acf(LBMA_weekly_d1)
Pacf(LBMA_weekly_d1)
LBMA_weekly_d1 <- diff(LBMA_weekly, differences=1)
plot.ts(LBMA_weekly_d1)
Box.test(LBMA_weekly_d1, lag=20, type='Ljung-Box')
adf.test(LBMA_weekly_d1, alternative = 'stationary')
kpss.test(LBMA_weekly_d1)
Acf(LBMA_weekly_d1)
Pacf(LBMA_weekly_d1)
Acf(LBMA_weekly_d1)
Pacf(LBMA_weekly_d1)
Pacf(LBMA_annually_d1)
Acf(LBMA_annually_d1)
Pacf(LBMA_annually_d1)
Acf(LBMA_monthly_d1)
Pacf(LBMA_monthly_d1)
Acf(LBMA_weekly_d1)
Pacf(LBMA_weekly_d1)
Acf(LBMA_annually_d1)
Pacf(LBMA_annually_d1)
plot.ts(LBMA_annually_d1)
Box.test(LBMA_annually_d1, lag=20, type='Ljung-Box')
adf.test(LBMA_annually_d1, alternative = 'stationary')
kpss.test(LBMA_annually_d1)
Acf(LBMA_monthly_d1)
Pacf(LBMA_monthly_d1)
Acf(LBMA_weekly_d1)
Pacf(LBMA_weekly_d1)
Acf(LBMA_annually_d1)
Pacf(LBMA_annually_d1)
Acf(LBMA_annually_d1)
plot.ts(LBMA_annually_d1)
t
plot.ts(LBMA_monthly_d1)
plot.ts(LBMA_weekly_d1)
Box.test(LBMA_weekly_d1, lag=20, type='Ljung-Box')
Box.test(LBMA_weekly_d1, lag=1, type='Ljung-Box')
Box.test(LBMA_weekly_d1, lag=2, type='Ljung-Box')
Box.test(LBMA_weekly_d1, lag=3, type='Ljung-Box')
Box.test(LBMA_weekly_d1, lag=4, type='Ljung-Box')
Box.test(LBMA_weekly_d1, lag=20, type='Ljung-Box')
Acf(LBMA_weekly_d1)
Pacf(LBMA_weekly_d1)
Acf(LBMA_monthly_d1)
Pacf(LBMA_monthly_d1)
Acf(LBMA_annually_d1)
Pacf(LBMA_annually_d1)
plot.ts(LBMA_annually_d1)
library(Quandl)
library(fpp)
library(forecast)
library(tseries)
library(Quandl)
library(fpp)
library(forecast)
library(tseries)
Quandl.api_key("3dVx5UyMfichkEtC9uE6")
LBMA_monthly = Quandl("LBMA/GOLD", collapse = 'monthly', type = 'ts')
LBMA_quarterly = Quandl("LBMA/GOLD", collapse = 'quarterly', type = 'ts')
LBMA_annually = Quandl("LBMA/GOLD", collapse = 'annual', type = 'ts')
plot(LBMA_monthly)
plot.ts(LBMA_monthly_d1)
LBMA_monthly = LBMA_monthly[, 'USD (AM)']
LBMA_monthly_d1 <- diff(LBMA_monthly, differences=1)
plot.ts(LBMA_monthly_d1)
racf=acf(LBMA_monthly_d1, lag.max=40,,type = "correlation")
racf=acf(LBMA_monthly_d1, lag.max=40,type = "correlation")
plot(racf, type='l', main='Correlogram for Recife Air Temp. Data')
racf=acf(LBMA_monthly_d1, lag.max=80,type = "correlation")
plot(racf, type='l', main='Correlogram for Recife Air Temp. Data')
plot(racf, type='l', main='Correlogram for Gold Price')
Acf(LBMA_monthly_d1)
Pacf(LBMA_monthly_d1)
plot(racf, type='l', main='Correlogram for Gold Price')
Acf(LBMA_monthly_d1)
plot(racf, type='l', main='Correlogram for Gold Price')
plot(LBMA_monthly)
plot(LBMA_monthly)
LBMA_monthly_d1 <- diff(LBMA_monthly, differences=1)
plot.ts(LBMA_monthly_d1)
Acf(LBMA_monthly_d1)
Acf(LBMA_monthly)
Pacf(LBMA_monthly)
Acf(LBMA_monthly_d1)
Pacf(LBMA_monthly_d1)
plot(LBMA_monthly)
install.packages("TSA")
p = periodogram(LBMA_monthly)
library(TSA) # Detect Seasonality using Fourier Transform
p = periodogram(LBMA_monthly)
attributes(p)
p$freq
dd = data.frame(freq=p$freq, spec=p$spec)
View(dd)
order = dd[order(-dd$spec),]
View(dd)
View(order)
top2 = head(order, 2)
top2
top2$freq
top2$f
time = 1/top2$freq
time
plot(LBMA_monthly)
LBMA_monthly
LBMA_monthly[300]
abline(v = LBMA_monthly[300])
abline(v = 1993)
plot(LBMA_monthly)
LBMA_monthly[300]
attributes(LBMA_monthly)
LBMA_monthly[300]$tsp
tsp(LBMA_monthly[300])
LBMA_monthly[300]
time
top2
trend_gold = ma(LBMA_monthly, order = 300, centre = T)
plot(as.ts(trend_gold))
lines(trend_gold)
plot(as.ts(trend_gold))
plot(as.ts(LBMA_monthly))
lines(trend_gold)
plot(as.ts(trend_gold))
plot(as.ts(LBMA_monthly))
lines(trend_gold)
top2 = head(order, 5)
top5 = head(order, 5)
top5
time = 1/top5$freq
time # 300 600
detrend_gold = LBMA_monthly - trend_gold
type(detrend_gold)
class(detrend_gold)
plot(detrend_gold)
plot(as.ts(LBMA_monthly))
lines(trend_gold)
plot(as.ts(trend_gold))
plot(detrend_gold)
m_gold = t(matrix(data = detrend_gold, nrow = 300))
seasonal_gold = colMeans(m_gold, na.rm = T)
plot(as.ts(rep(seasonal_gold,2)))
random_gold = LBMA_monthly - trend_gold - seasonal_gold
plot(as.ts(random_beer))
plot(as.ts(random_gold))
seasonal_gold = colMeans(m_gold, na.rm = T)
plot(as.ts(rep(seasonal_gold,2)))
plot(detrend_gold)
seasonal_gold = colMeans(m_gold, na.rm = T)
plot(as.ts(rep(seasonal_gold,2)))
plot(as.ts(rep(seasonal_gold,3)))
plot(as.ts(rep(seasonal_gold,1)))
plot(as.ts(rep(seasonal_gold,2)))
random_gold = LBMA_monthly - trend_gold - seasonal_gold
plot(as.ts(random_gold))
trend_gold
seasonal_gold
random_gold
recomposed_gold = trend_gold + seasonal_gold + random_gold
plot(as.ts(recomposed_gold))
trend_gold
decompose_beer = decompose(LBMA_monthly, "additive")
rm(decompose_beer)
plot(as.ts(decompose_gold$seasonal))
decompose_gold = decompose(LBMA_monthly, "additive")
plot(as.ts(decompose_gold$seasonal))
plot(as.ts(decompose_gold$trend))
plot(as.ts(decompose_gold$random))
plot(decompose_gold)
decompose_gold$seasonal
View(order)
trend_gold = ma(LBMA_monthly, order = 12, centre = T)
plot(as.ts(LBMA_monthly))
lines(trend_gold)
plot(as.ts(trend_gold))
plot(as.ts(trend_gold))
plot(as.ts(LBMA_monthly))
lines(trend_gold)
plot(as.ts(trend_gold))
detrend_gold = LBMA_monthly - trend_gold
plot(detrend_gold)
m_gold = t(matrix(data = detrend_gold, nrow = 12))
seasonal_gold = colMeans(m_gold, na.rm = T)
plot(as.ts(rep(seasonal_gold,49)))
random_gold = LBMA_monthly - trend_gold - seasonal_gold
plot(as.ts(random_gold))
recomposed_gold = trend_gold + seasonal_gold + random_gold
plot(as.ts(recomposed_gold))
decompose_gold$seasonal
plot(decompose_gold)
Acf(random_gold)
Pacf(random_gold)
plot(decompose_gold)
setwd("~/Downloads/NYCDSA/Project/Capstone/ameco")
df   <- read.csv("AMECO1.TXT", header = TRUE, sep = ';')  # Population and Employment
df2  <- read.csv("AMECO2.TXT", header = TRUE, sep = ';')  # Consumption
df3  <- read.csv("AMECO3.TXT", header = TRUE, sep = ';')  # Capital Formation and Saving, Total Economy And Sectors
df4  <- read.csv("AMECO4.TXT", header = TRUE, sep = ';')  # Domestic and Final Demand
df5  <- read.csv("AMECO5.TXT", header = TRUE, sep = ';')  # National Income
df6  <- read.csv("AMECO6.TXT", header = TRUE, sep = ';')  # Domestic Product
df7  <- read.csv("AMECO7.TXT", header = TRUE, sep = ';')  # Gross Domestic Product (Income Approach), Labour Costs
df8  <- read.csv("AMECO8.TXT", header = TRUE, sep = ';')  # Capital Stock
df9  <- read.csv("AMECO9.TXT", header = TRUE, sep = ';')  # Exports and Imports of Goods And Services, National Accounts
df10 <- read.csv("AMECO10.TXT", header = TRUE, sep = ';') # Balances with the Rest Of The World, National Accounts
df11 <- read.csv("AMECO11.TXT", header = TRUE, sep = ';') # Foreign Trade
df12 <- read.csv("AMECO12.TXT", header = TRUE, sep = ';') # National Accounts by Branch Of Activity
df13 <- read.csv("AMECO13.TXT", header = TRUE, sep = ';') # Monetary Variables
df14 <- read.csv("AMECO14.TXT", header = TRUE, sep = ';') # Corporations (S11 + S12)
df15 <- read.csv("AMECO15.TXT", header = TRUE, sep = ';') # Households and Npish (S14 + S15)
df16 <- read.csv("AMECO16.TXT", header = TRUE, sep = ';') # General Government (S13)
df17 <- read.csv("AMECO17.TXT", header = TRUE, sep = ';') # Cyclical Adjustment of Public Finance Variables
df18 <- read.csv("AMECO18.TXT", header = TRUE, sep = ';') # Gross Public Debt
?write.csv
write.csv(df, file = "AMECO1.csv")
write.csv(df, file = "AMECO1.csv")
write.csv(df, file = "AMECO1.csv")
write.csv(df, file = "AMECO1.csv")
write.csv(df, file = "AMECO1.csv")
write.csv(df1, file = "AMECO2.csv")
write.csv(df2, file = "AMECO3.csv")
write.csv(df3, file = "AMECO4.csv")
write.csv(df4, file = "AMECO5.csv")
write.csv(df5, file = "AMECO6.csv")
write.csv(df6, file = "AMECO7.csv")
write.csv(df7, file = "AMECO8.csv")
write.csv(df8, file = "AMECO9.csv")
write.csv(df9, file = "AMECO10.csv")
write.csv(df10, file = "AMECO11.csv")
write.csv(df11, file = "AMECO12.csv")
write.csv(df12, file = "AMECO12.csv")
write.csv(df13, file = "AMECO13.csv")
write.csv(df14, file = "AMECO14.csv")
write.csv(df15, file = "AMECO15.csv")
write.csv(df16, file = "AMECO16.csv")
write.csv(df17, file = "AMECO17.csv")
write.csv(df18, file = "AMECO18.csv")
df1 <- read.csv("AMECO1.TXT", header = TRUE, sep = ';')  # Population and Employment
write.csv(df1 , file = "AMECO1.csv")
write.csv(df2 , file = "AMECO2.csv")
write.csv(df3 , file = "AMECO3.csv")
write.csv(df4 , file = "AMECO4.csv")
write.csv(df5 , file = "AMECO5.csv")
write.csv(df6 , file = "AMECO6.csv")
write.csv(df7 , file = "AMECO7.csv")
write.csv(df8 , file = "AMECO8.csv")
write.csv(df9 , file = "AMECO9.csv")
write.csv(df10, file = "AMECO10.csv")
write.csv(df11, file = "AMECO11.csv")
write.csv(df12, file = "AMECO12.csv")
write.csv(df13, file = "AMECO13.csv")
write.csv(df14, file = "AMECO14.csv")
write.csv(df15, file = "AMECO15.csv")
write.csv(df16, file = "AMECO16.csv")
write.csv(df17, file = "AMECO17.csv")
write.csv(df18, file = "AMECO18.csv")
